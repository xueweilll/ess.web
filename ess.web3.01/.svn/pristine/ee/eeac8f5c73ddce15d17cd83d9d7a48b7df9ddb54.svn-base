package com.protocol;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.apache.mina.core.session.IoSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hibernate.entity.DTU;
import com.hibernate.entity.LMU;
import com.hibernate.entity.Sensor;
import com.service.SensorService;
import com.unit.PartsQuence;

/** 
* @ClassName: NQProtocol 
* @Description: TODO(氨气传感器协议) 
* @author lyf-laptop 
* @date 2016年11月25日 下午2:26:29 
*  
*/
@Service("nQProtocol")
public class NQProtocol implements YZCProtocol {
	@Autowired
	private PartsQuence partsQuence;
	@Autowired
	private SensorService sensorService;
	/* (非 Javadoc) 
	* <p>Title: readCmd</p> 
	* <p>Description: 读取资料</p> 
	* @return 
	* @see com.protocol.YZCProtocol#readCmd() 
	*/
	@Override
	public byte[] readCmd(int code) {
		byte[] cmd = new byte[8];
		cmd[0] = (byte) code;
		cmd[1] = 0x03;
		cmd[2] = 0x00;
		cmd[3] = 0x00;
		cmd[4] = 0x00;
		cmd[5] = 0x02;
		CRC crc = new CRC();
		crc.CrcMake(6, cmd);
		cmd[6] = crc.getBYCRCHi();
		cmd[7] = crc.getBYCRCLo();
		return cmd;
	}

	/* (非 Javadoc) 
	* <p>Title: anlysis</p> 
	* <p>Description: 解析指令</p> 
	* @param data
	* @return 
	* @see com.protocol.YZCProtocol#anlysis(byte[]) 
	*/
	@Override
	public void anlysis(byte[] data,IoSession session) {
		
		CRC crc = new CRC();
		if(crc.crc_check(7, data) != 0){
			Map<String, String> map = new HashMap<String, String>();
			int ppm = 0;
			//data[3],data[4];
			ppm = Convert.ArrByteToInt(data,3,2);
			DTU dtu = (DTU) session.getAttribute("dtu");
			Sensor sensor = new Sensor();
			sensor.setId(UUID.randomUUID().toString());
			sensor.setDtuId(String.valueOf(dtu.getId()));
			for (LMU lmu : dtu.getLmus()) {
				if (lmu.getCode() == data[0]) {
					sensor.setLmu(lmu);
					break;
				}
			}
			sensor.setDtuName(dtu.getName());
			//氨气
			sensor.setV1(new BigDecimal(String.valueOf(ppm)).setScale(2, BigDecimal.ROUND_HALF_UP));
			sensor.setAddtime(Calendar.getInstance());
			map.put("ppm",String.valueOf(new BigDecimal(String.valueOf(ppm)).setScale(2, BigDecimal.ROUND_HALF_UP)));
			try {
				sensorService.insert(sensor);
			} catch (Exception e) {
				e.printStackTrace();
			}
			partsQuence.put(sensor.getLmu().getId(), map);
			
		}
	}
 
	public static void main(String[] args){
		byte[] data = new byte[9];
		data[0]=0x01;
		data[1]=0x03;
		data[2]=0x04;
		data[3]=0x01;
		data[4]=(byte) 0xB1;
		data[5]=0x00;
		data[6]=0x00;
		data[7]=(byte) 0xAB;
		data[8]=(byte) 0xE8;
		//new NQProtocol().anlysis(data);
	}
}
